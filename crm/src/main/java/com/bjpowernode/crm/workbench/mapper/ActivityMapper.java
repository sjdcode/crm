package com.bjpowernode.crm.workbench.mapper;

import com.bjpowernode.crm.workbench.domain.Activity;
import com.bjpowernode.crm.workbench.domain.ClueActivityRelation;
import org.apache.ibatis.annotations.Param;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Mon Jul 18 22:40:14 CST 2022
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Mon Jul 18 22:40:14 CST 2022
     */
    int insert(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Mon Jul 18 22:40:14 CST 2022
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Mon Jul 18 22:40:14 CST 2022
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Mon Jul 18 22:40:14 CST 2022
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Mon Jul 18 22:40:14 CST 2022
     */
    int updateByPrimaryKey(Activity record);

    /**
     * 保存创建的市场活动
     */
    int insertActivity(Activity activity);

    /**
     * 根据分页和条件查询市场活动
     */
    List<Activity> selectActivityByConditionForPage(Map<String,Object> map);

    /**
     * 根据分页和条件查询总记录数
     */
    int selectCountOfActivityByCondition(Map<String,Object> map);

    /**
     * 根据id删除市场活动
     */
    int deleteActivityByIds(String[] ids);

    /**
     * 根据id查询市场活动
     */
    Activity selectActivityById(String id);

    /**
     *  更新数据
     */
    int updateActivity(Activity activity);

    /**
     * 查询全部activity
     */
    List<Activity> selectAllActivitys();

    /**
     * 根据一组id查询Activity的List
     */
    List<Activity> selectActivityByChoose(String[] ids);

    /**
     * 插入一组Activity
     */
    int insertActivityByList(List<Activity> activityList);

    /**
     * 根据id查询具体内容Activity
     */
    Activity queryActivityForDetailById(String id);

    /**
     * 根据ClueId查询Activity
     */
    List<Activity> selectActivityForDetailByClueId(String clueId);

    /**
     * 根据name模糊查询Activity
     */
    List<Activity> selectActivityForDetailByDimNameAndActivityIds(@Param("dimName") String dimName,@Param("activityIds") String[] activityIds);

    /**
     * 根据activityIds查询Activity明细
     */
    List<Activity> selectActivityForDetailByIds(@Param("ids") String[] ids);

    /**
     * convert查询市场活动
     */
    List<Activity> selectActivityForDetailByDimNameAndClueId(@Param("dimName") String dimName,@Param("clueId") String clueId);

    /**
     * 根据dimName查询Activity的明细信息
     */
    List<Activity> selectActivityForDetailByDimName(String dimName);
}